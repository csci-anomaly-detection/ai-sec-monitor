name: ai-sec-monitor

networks:
  lan_net:
    driver: bridge
    ipam: { config: [ { subnet: 10.10.0.0/24 } ] }
  dmz_net:
    driver: bridge
    ipam: { config: [ { subnet: 10.10.10.0/24 } ] }

volumes:
  dbdata: {}

services:
  router:
    image: quay.io/frrouting/frr:10.4.1
    container_name: router
    privileged: true
    cap_add: [ "NET_ADMIN", "NET_RAW" ]
    networks:
      lan_net: { ipv4_address: 10.10.0.254 }
      dmz_net: { ipv4_address: 10.10.10.254 }
    volumes:
      - ./router/frr.conf:/etc/frr/frr.conf:ro
      - ./router/daemons:/etc/frr/daemons:ro
      - ./router/init.sh:/init.sh:ro
    command: [ "bash", "/init.sh" ]
    restart: unless-stopped

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      dmz_net: { ipv4_address: 10.10.10.12 }
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  authapp:
    build: ./services/auth-app
    depends_on:
      db: { condition: service_healthy }
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      AUTH_SECRET: ${AUTH_SECRET}
    expose: ["3000"]
    networks:
      dmz_net: { ipv4_address: 10.10.10.11 }
    restart: unless-stopped

  web:
    image: nginx:alpine
    depends_on: [authapp]
    ports: ["8080:80"]     # for server: change to ["80:80"] if you want public HTTP
    volumes:
      - ./services/auth-app/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      dmz_net: { ipv4_address: 10.10.10.10 }
    restart: unless-stopped

  honeypot:
    image: cowrie/cowrie:latest
    container_name: honeypot
    networks:
      dmz_net: { ipv4_address: 10.10.10.30 }
    volumes:
      - ./logs/cowrie:/cowrie/var/log/cowrie
    restart: unless-stopped

  workstation:
    image: alpine:latest
    networks:
      lan_net: { ipv4_address: 10.10.0.20 }
    cap_add: ["NET_ADMIN"]
    volumes:
      - ../sim/workstation/entrypoint.sh:/entrypoint.sh:ro
    command: [ "sh", "-lc", "/entrypoint.sh; sleep infinity" ]
    restart: unless-stopped

  sensor:
    image: jasonish/suricata:latest
    container_name: sensor
    # On Linux servers, host mode gives best packet visibility
    network_mode: host
    cap_add: [ "NET_ADMIN", "NET_RAW" ]
    command: [ "-c", "/etc/suricata/suricata.yaml" ]
    volumes:
      - ./logs/suricata:/var/log/suricata
      - ./sensor/suricata.yaml:/etc/suricata/suricata.yaml:ro
      - ./sensor/rules:/etc/suricata/rules:ro
    restart: unless-stopped
