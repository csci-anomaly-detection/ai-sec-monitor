version: '3.8'

services:
  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: chroma
    ports:
      - "1563:8000"
    environment:
      - ANONYMIZED_TELEMETRY=false
    volumes:
      - ./chroma-data:/chroma
    restart: unless-stopped

  batching-agent:
    image: python:3.11-slim
    container_name: batching-agent
    depends_on:
      - chroma
    volumes:
      - ./logs:/app/logs
      - ./agents/tools/pgres.py:/app/pgres.py
      - ./agents/tools/chroma.py:/app/chroma.py
      - ./agents/tools/check_relevance.py:/app/check_relevance.py
      - ./agents/batching-agent/batching_agent.py:/app/batching_agent.py
      - ./agents/batching-agent/pre_batch.py:/app/pre_batch.py
      - ./agents/batching-agent/preprocessor.py:/app/preprocessor.py
      - ./python-files/chroma_setup.py:/app/chroma_setup.py
      - ./python-files/postgres_setup.py:/app/postgres_setup.py
      - ./python-files/main.py:/app/main.py
      - ./demo_batch.json:/app/demo_batch.json
      - ./pip-cache:/root/.cache/pip
    environment:
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=alertsdb
      - OLLAMA_PORT=11434
      - PYTHONPATH=/app
    working_dir: /app
    command: >
      bash -c "
        set -e &&
        pip install chromadb psycopg2-binary langchain langchain-ollama &&
        python /app/chroma_setup.py &&
        python /app/postgres_setup.py &&
        python /app/main.py
      "
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: alertsdb
    ports:
      - "1562:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "1561:11434"
    volumes:
      - ./ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      # - CUDA_VISIBLE_DEVICES=1
    restart: unless-stopped
    gpus: all
